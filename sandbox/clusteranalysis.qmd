---
title: "Cluster Analysis"
---

```{r}
library(tidyverse)
library(reshape2)

# Load data
votes <- readr::read_csv("../data-clean/votes.csv")

# Filter out rows with "Seen" as "NA - Critics' Pick"
votes_filtered <- votes %>%
  filter(Seen != "NA - Critics' Pick")

# Remove unnecessary columns
votes <- votes_filtered %>%
  select(-Category, -MovieNominee, -Nominee, -Critic, -color, -Movie) %>%
  distinct(Alias, .keep_all = TRUE)  # Keep unique alias with all columns

# Step 2: Split the "Seen" column into separate movies
votes$Seen <- strsplit(votes$Seen, ", ")

# Step 3: Create a list of unique movies
all_movies <- unique(unlist(votes$Seen))

# Step 4: Create a matrix or data frame to store the results
result <- matrix(0, nrow = nrow(votes), ncol = length(all_movies), dimnames = list(NULL, all_movies))

# Step 5: Populate the matrix with 1s and 0s
for (i in 1:nrow(votes)) {
  result[i, votes$Seen[[i]]] <- 1
}

# Convert the matrix to a data frame and add the Alias column
result_df <- data.frame(Alias = votes$Alias, result)

# Replace dots with spaces in column names
colnames(result_df) <- gsub("\\.", " ", colnames(result_df))

```




```{r}
# Step 6: Perform hierarchical clustering
d <- dist(result, method = "euclidean")
hc <- hclust(d, method = "ward.D2")

# Step 7: Create dendrogram
plot(hc, cex = 0.6, hang = -1)
```

```{r}
# Step 6: Perform hierarchical clustering
d <- dist(result, method = "euclidean")
hc <- hclust(d, method = "ward.D2")

# Step 7: Cut the tree into clusters
clusters <- cutree(hc, k = 3)  # Adjust the number of clusters as needed

# Step 8: Create a scatter plot
plot_data <- data.frame(Alias = votes$Alias, Cluster = clusters)
plot_data$Cluster <- as.factor(plot_data$Cluster)
plot_data$Alias <- factor(plot_data$Alias, levels = unique(plot_data$Alias))
plot(plot_data$Alias, col = plot_data$Cluster, pch = 19, xlab = "Alias", ylab = "Cluster", main = "Cluster Assignment Scatter Plot")

# Step 9: Create a heatmap
heatmap_data <- result
rownames(heatmap_data) <- votes$Alias
heatmap_data <- heatmap_data[order(clusters), ]  # Order rows based on cluster assignments

# Install required package if not already installed
if (!requireNamespace("pheatmap", quietly = TRUE)) {
  install.packages("pheatmap")
}

# Create heatmap using pheatmap package
library(pheatmap)
pheatmap(heatmap_data, cluster_rows = FALSE, cluster_cols = FALSE, main = "Cluster Assignment Heatmap")

```


